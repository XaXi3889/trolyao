import re
import unicodedata
import streamlit as st
import pandas as pd
from rapidfuzz import fuzz

st.set_page_config(page_title="Tr·ª£ l√Ω ·∫£o QC C3", layout="centered")
st.title("ü§ñ Tr·ª£ l√Ω ·∫£o QC C3")
st.caption("B·∫°n ch·ªâ c·∫ßn g√µ c√°c t·ª´ kho√° li√™n quan (kh√¥ng c·∫ßn ch√≠nh x√°c tuy·ªát ƒë·ªëi).")

# ============ Helpers ============
def normalize(s: str) -> str:
    """B·ªè d·∫•u, k√Ω t·ª± ƒë·∫∑c bi·ªát, vi·∫øt th∆∞·ªùng, r√∫t g·ªçn kho·∫£ng tr·∫Øng."""
    s = unicodedata.normalize('NFD', str(s))
    s = ''.join(ch for ch in s if unicodedata.category(ch) != 'Mn')
    s = s.lower()
    s = re.sub(r"[^a-z0-9\s]", " ", s)
    s = re.sub(r"\s+", " ", s).strip()
    return s

def render_row(row, prefix=""):
    st.markdown(prefix + "**üìå L·ªói:**")
    st.text(f"{row['TB']} ‚Äî {row['MT']}")
    st.markdown("**üõ†Ô∏è C√°ch x·ª≠ l√Ω:**")
    st.text(row["CXL"])
    st.divider()

@st.cache_data
def load_data():
    df = pd.read_excel("QCC3.xlsx", sheet_name=0, header=1)
    # Chu·∫©n ho√° t√™n c·ªôt
    cols_norm = {normalize(c): c for c in df.columns}
    col_bp  = cols_norm[[k for k in cols_norm if "bo phan" in k][0]]
    col_tb  = cols_norm[[k for k in cols_norm if "thong bao loi" in k][0]]
    col_mt  = cols_norm[[k for k in cols_norm if "mo ta loi" in k][0]]
    col_cxl = cols_norm[[k for k in cols_norm if ("cach xu li" in k or "cach xu ly" in k)][0]]

    df = df.rename(columns={col_bp:"BP", col_tb:"TB", col_mt:"MT", col_cxl:"CXL"})
    for c in ["BP", "TB", "MT", "CXL"]:
        df[c] = df[c].astype(str).fillna("")

    df["TB_clean"] = df["TB"].map(normalize)
    df["MT_clean"] = df["MT"].map(normalize)
    return df[["BP", "TB", "MT", "CXL", "TB_clean", "MT_clean"]]

df = load_data()

# =================== Search ===================
q_raw = st.text_input("B·∫°n mu·ªën h·ªèi g√¨?")
if q_raw:
    q = normalize(q_raw)
    keywords = q.split()  # t√°ch th√†nh nhi·ªÅu t·ª´

    # ---------- B1: T√¨m c√°c d√≤ng ch·ª©a T·∫§T C·∫¢ t·ª´ kho√° ----------
    def row_match_all(row):
        combined = row["TB_clean"] + " " + row["MT_clean"]
        return all(kw in combined for kw in keywords)

    matched = df[df.apply(row_match_all, axis=1)]

    if not matched.empty:
        # l·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n
        best = matched.iloc[0]
        st.success("‚úÖ T√¨m th·∫•y k·∫øt qu·∫£ kh·ªõp t·∫•t c·∫£ t·ª´ kh√≥a.")
        render_row(best, prefix="‚úÖ ")
        st.stop()

    # ---------- B2: Fuzzy fallback ----------
    def fuzzy_score(row):
        combined = row["TB_clean"] + " " + row["MT_clean"]
        return fuzz.token_set_ratio(q, combined)

    df["score"] = df.apply(fuzzy_score, axis=1)
    best = df.sort_values("score", ascending=False).iloc[0]

    if best["score"] < 60:
        st.error("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ƒë·ªß gi·ªëng. Th·ª≠ nh·∫≠p t·ª´ kho√° ƒë·∫∑c th√π h∆°n.")
    else:
        st.info(f"K·∫øt qu·∫£ gi·ªëng nh·∫•t (~{best['score']:.0f}%):")
        render_row(best, prefix="‚≠ê ")
