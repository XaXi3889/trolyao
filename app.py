import re
import streamlit as st
import pandas as pd
from rapidfuzz import process, fuzz
from unidecode import unidecode

st.set_page_config(page_title="Tr·ª£ l√Ω ·∫£o QC C3", layout="centered")
st.title("ü§ñ Tr·ª£ l√Ω ·∫£o QC C3")
st.caption("G√µ t·ª´ kho√° g·∫ßn gi·ªëng (v√≠ d·ª•: 'm·∫•t ƒë√®n xanh trolley')")

# ---------- Helpers ----------
def normalize(s: str) -> str:
    s = unidecode(str(s).lower())
    s = re.sub(r"[^a-z0-9\s]", " ", s)   # b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    s = re.sub(r"\s+", " ", s).strip()
    return s

@st.cache_data
def load_data():
    # Header ·ªü d√≤ng 2 c·ªßa Excel
    df = pd.read_excel("QCC3.xlsx", sheet_name=0, header=1)

    # ƒê·ªïi t√™n c·ªôt v·ªÅ d·∫°ng chu·∫©n, ch·ªãu ƒë∆∞·ª£c kh√°c bi·ªát ch√≠nh t·∫£/d·∫•u
    cols_norm = {normalize(c): c for c in df.columns}
    col_bp  = cols_norm[[k for k in cols_norm if "bo phan" in k][0]]
    col_tb  = cols_norm[[k for k in cols_norm if "thong bao loi" in k][0]]
    col_mt  = cols_norm[[k for k in cols_norm if "mo ta loi" in k][0]]
    col_cxl = cols_norm[[k for k in cols_norm if ("cach xu li" in k or "cach xu ly" in k)][0]]

    df = df.rename(columns={
        col_bp: "BP", col_tb: "TB", col_mt: "MT", col_cxl: "CXL"
    })

    # B·∫£n s·∫°ch ƒë·ªÉ so kh·ªõp
    for c in ["BP", "TB", "MT", "CXL"]:
        df[c] = df[c].astype(str).fillna("")

    df["TB_clean"] = df["TB"].map(normalize)
    df["MT_clean"] = df["MT"].map(normalize)
    return df[["BP", "TB", "MT", "CXL", "TB_clean", "MT_clean"]]

df = load_data()

q_raw = st.text_input("B·∫°n mu·ªën h·ªèi g√¨?")
if q_raw:
    q = normalize(q_raw)

    # T√≠nh ƒëi·ªÉm c√≥ tr·ªçng s·ªë: TB 70% + MT 30%
    title_matches = process.extract(q, df["TB_clean"], scorer=fuzz.token_set_ratio, limit=20)
    desc_matches  = process.extract(q, df["MT_clean"], scorer=fuzz.token_set_ratio, limit=20)

    scores = {}
    for _, s, idx in title_matches:
        scores[idx] = scores.get(idx, 0) + 0.7 * s
    for _, s, idx in desc_matches:
        scores[idx] = scores.get(idx, 0) + 0.3 * s

    top = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:3]  # l·∫•y top 3
    if not top or top[0][1] < 55:  # ng∆∞·ª°ng t·ª± ch·ªânh
        st.error("Ch∆∞a t√¨m ƒë∆∞·ª£c k·∫øt qu·∫£ ƒë·ªß gi·ªëng. Th·ª≠ t·ª´ kho√° kh√°c (v√≠ d·ª• th√™m 'trolley', 'gantry', 'ƒë√®n xanh', ‚Ä¶).")
    else:
        st.success(f"ƒê√£ t√¨m th·∫•y {len(top)} k·∫øt qu·∫£ g·∫ßn nh·∫•t (ƒë·ªô gi·ªëng cao nh·∫•t ~{top[0][1]:.0f}%).")
        for rank, (idx, score) in enumerate(top, 1):
            row = df.loc[idx]
            st.markdown(f"**#{rank} ‚Ä¢ ƒê·ªô gi·ªëng ~{score:.0f}%**")
            st.markdown("**üìå L·ªói:**")
            st.text(f"{row['TB']} ‚Äî {row['MT']}")
            st.markdown("**üõ†Ô∏è C√°ch x·ª≠ l√Ω:**")
            st.text(row["CXL"])
            st.divider()
